'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var chroma = require('chroma-js');
var dateFns = require('date-fns');
var React = require('react');

function _interopDefault (e) { return e && e.__esModule ? e : { default: e }; }

var chroma__default = /*#__PURE__*/_interopDefault(chroma);
var React__default = /*#__PURE__*/_interopDefault(React);

function _extends() {
  _extends = Object.assign ? Object.assign.bind() : function (target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends.apply(this, arguments);
}

const NAMESPACE = 'react-activity-calendar';
const LEVEL_COUNT = 5;
const MIN_DISTANCE_MONTH_LABELS = 2;
const DEFAULT_MONTH_LABELS = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];
const DEFAULT_WEEKDAY_LABELS = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'];
const DEFAULT_LABELS = {
  months: DEFAULT_MONTH_LABELS,
  weekdays: DEFAULT_WEEKDAY_LABELS,
  totalCount: '{{count}} activities in {{year}}',
  legend: {
    less: 'Less',
    more: 'More'
  }
};

function useColorScheme() {
  const [colorScheme, setColorScheme] = React.useState('light');
  const onChange = event => setColorScheme(event.matches ? 'dark' : 'light');
  React.useEffect(() => {
    const mediaQuery = window.matchMedia('(prefers-color-scheme: dark)');
    setColorScheme(mediaQuery.matches ? 'dark' : 'light');
    mediaQuery.addEventListener('change', onChange);
    return () => {
      mediaQuery.removeEventListener('change', onChange);
    };
  }, []);
  return colorScheme;
}

const query = '(prefers-reduced-motion: reduce)';
function usePrefersReducedMotion() {
  const [prefersReducedMotion, setPrefersReducedMotion] = React.useState(true);
  React.useEffect(() => {
    const mediaQuery = window.matchMedia(query);
    setPrefersReducedMotion(mediaQuery.matches);
    const onChange = event => {
      setPrefersReducedMotion(event.matches);
    };
    mediaQuery.addEventListener('change', onChange);
    return () => {
      mediaQuery.removeEventListener('change', onChange);
    };
  }, []);
  return prefersReducedMotion;
}

function groupByWeeks(days) {
  let weekStart = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
  if (days.length === 0) {
    return [];
  }
  const normalizedDays = fillHoles(days);

  // Determine the first date of the calendar. If the first date is not the
  // set start weekday, the selected weekday one week earlier is used.
  const firstDate = dateFns.parseISO(normalizedDays[0].date);
  const firstCalendarDate = dateFns.getDay(firstDate) === weekStart ? firstDate : dateFns.subWeeks(dateFns.nextDay(firstDate, weekStart), 1);

  // To correctly group activities by week, it is necessary to left pad the
  // list because the first date might not be set start weekday.
  const paddedDays = [...Array(dateFns.differenceInCalendarDays(firstDate, firstCalendarDate)).fill(undefined), ...normalizedDays];
  return Array(Math.ceil(paddedDays.length / 7)).fill(undefined).map((_, calendarWeek) => paddedDays.slice(calendarWeek * 7, calendarWeek * 7 + 7));
}

/**
 * The calendar expects a continuous sequence of days, so fill gaps with empty
 * activity data.
 */
function fillHoles(days) {
  const daysMap = days.reduce((map, day) => {
    map.set(day.date, day);
    return map;
  }, new Map());
  return dateFns.eachDayOfInterval({
    start: dateFns.parseISO(days[0].date),
    end: dateFns.parseISO(days[days.length - 1].date)
  }).map(day => {
    const date = dateFns.formatISO(day, {
      representation: 'date'
    });
    if (daysMap.has(date)) {
      return daysMap.get(date);
    }
    return {
      date,
      count: 0,
      level: 0
    };
  });
}
function getMonthLabels(weeks) {
  let monthNames = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : DEFAULT_MONTH_LABELS;
  return weeks.reduce((labels, week, index) => {
    const firstWeekDay = week.find(day => day !== undefined);
    if (!firstWeekDay) {
      throw new Error(`Unexpected error: Week is empty: [${week}].`);
    }
    const month = monthNames[dateFns.getMonth(dateFns.parseISO(firstWeekDay.date))];
    const prev = labels[labels.length - 1];
    if (index === 0 || prev.text !== month) {
      return [...labels, {
        x: index,
        y: 0,
        text: month
      }];
    }
    return labels;
  }, []).filter((label, index, labels) => {
    if (index === 0) {
      return labels[1] && labels[1].x - label.x > MIN_DISTANCE_MONTH_LABELS;
    }
    return true;
  });
}
function getClassName(name, styles) {
  if (styles) {
    return `${NAMESPACE}__${name} ${styles}`;
  }
  return `${NAMESPACE}__${name}`;
}
function generateEmptyData() {
  const year = new Date().getFullYear();
  const days = dateFns.eachDayOfInterval({
    start: new Date(year, 0, 1),
    end: new Date(year, 11, 31)
  });
  return days.map(date => ({
    date: dateFns.formatISO(date, {
      representation: 'date'
    }),
    count: 0,
    level: 0
  }));
}

const defaultTheme = createTheme({
  light: ['hsl(0, 0%, 92%)', 'hsl(0, 0%, 26%)'],
  dark: ['hsl(0, 0%, 20%)', 'hsl(0, 0%, 92%)']
});
function createTheme(theme) {
  if (theme) {
    var _theme$light, _theme$dark;
    validateTheme(theme);
    theme.light = (_theme$light = theme.light) !== null && _theme$light !== void 0 ? _theme$light : defaultTheme.light;
    theme.dark = (_theme$dark = theme.dark) !== null && _theme$dark !== void 0 ? _theme$dark : defaultTheme.dark;
    return {
      light: isColorScale(theme.light) ? theme.light : createColorScale(theme.light),
      dark: isColorScale(theme.dark) ? theme.dark : createColorScale(theme.dark)
    };
  }
  return defaultTheme;
}
function validateTheme(theme) {
  if (typeof theme !== 'object' || theme.light === undefined && theme.dark === undefined) {
    throw new Error(`The theme object must contain at least one of the fields "light" and "dark" with exactly 2 or ${LEVEL_COUNT} colors respectively.`);
  }
  if (theme.light) {
    const {
      length
    } = theme.light;
    if (length !== 2 && length !== LEVEL_COUNT) {
      throw new Error(`theme.light must contain exactly 2 or ${LEVEL_COUNT} colors, ${length} passed.`);
    }
  }
  if (theme.dark) {
    const {
      length
    } = theme.dark;
    if (length !== 2 && length !== LEVEL_COUNT) {
      throw new Error(`theme.dark must contain exactly 2 or ${LEVEL_COUNT} colors, ${length} passed.`);
    }
  }
}
function isColorScale(colors) {
  const invalidColor = colors.find(color => !chroma__default.default.valid(color));
  if (invalidColor) {
    throw new Error(`Invalid color "${invalidColor}" passed. All CSS color formats are accepted.`);
  }
  return colors.length === LEVEL_COUNT;
}
function createColorScale(colors) {
  return chroma__default.default.scale(colors).mode('lch').colors(LEVEL_COUNT);
}

function styleInject(css, ref) {
  if ( ref === void 0 ) ref = {};
  var insertAt = ref.insertAt;

  if (!css || typeof document === 'undefined') { return; }

  var head = document.head || document.getElementsByTagName('head')[0];
  var style = document.createElement('style');
  style.type = 'text/css';

  if (insertAt === 'top') {
    if (head.firstChild) {
      head.insertBefore(style, head.firstChild);
    } else {
      head.appendChild(style);
    }
  } else {
    head.appendChild(style);
  }

  if (style.styleSheet) {
    style.styleSheet.cssText = css;
  } else {
    style.appendChild(document.createTextNode(css));
  }
}

var css_248z = ".styles-module_container__Zq3Ln rect {\n  stroke: rgba(0, 0, 0, 0.08);\n  stroke-width: 1px;\n  shape-rendering: geometricPrecision;\n}\n\n@media (prefers-color-scheme: dark) {\n  .styles-module_container__Zq3Ln rect {\n    stroke: rgba(255, 255, 255, 0.04);\n  }\n}\n\n.styles-module_calendar__-Ozc6 {\n  display: block;\n  max-width: 100%;\n  height: auto;\n  overflow: visible;\n}\n\n.styles-module_calendar__-Ozc6 text {\n  fill: currentColor;\n}\n\n.styles-module_calendar__-Ozc6 [data-level='0'] {\n  fill: var(--react-activity-calendar-level-0);\n}\n\n.styles-module_calendar__-Ozc6 [data-level='1'] {\n  fill: var(--react-activity-calendar-level-1);\n}\n\n.styles-module_calendar__-Ozc6 [data-level='2'] {\n  fill: var(--react-activity-calendar-level-2);\n}\n\n.styles-module_calendar__-Ozc6 [data-level='3'] {\n  fill: var(--react-activity-calendar-level-3);\n}\n\n.styles-module_calendar__-Ozc6 [data-level='4'] {\n  fill: var(--react-activity-calendar-level-4);\n}\n\n.styles-module_footer__IMos1 {\n  display: flex;\n}\n\n.styles-module_legendColors__oZihX {\n  margin-left: auto;\n  display: flex;\n  align-items: center;\n  gap: 0.2em;\n}\n\n@keyframes styles-module_loadingAnimation__Vul35 {\n  0% {\n    fill: var(--react-activity-calendar-loading);\n  }\n  50% {\n    fill: var(--react-activity-calendar-loading-active);\n  }\n  100% {\n    fill: var(--react-activity-calendar-loading);\n  }\n}\n";
var styles = {"container":"styles-module_container__Zq3Ln","calendar":"styles-module_calendar__-Ozc6","footer":"styles-module_footer__IMos1","legendColors":"styles-module_legendColors__oZihX","loadingAnimation":"styles-module_loadingAnimation__Vul35"};
styleInject(css_248z);

const ActivityCalendar = _ref => {
  let {
    data,
    blockMargin = 4,
    blockRadius = 2,
    blockSize = 12,
    colorScheme = undefined,
    eventHandlers = {},
    fontSize = 14,
    hideColorLegend = false,
    hideMonthLabels = false,
    hideTotalCount = false,
    labels: labelsProp = undefined,
    loading = false,
    renderBlock = undefined,
    showWeekdayLabels = false,
    style = {},
    theme: themeProp = undefined,
    totalCount: totalCountProp = undefined,
    weekStart = 0 // Sunday
  } = _ref;
  const theme = createTheme(themeProp);
  const systemColorScheme = useColorScheme();
  const colorScale = theme[colorScheme !== null && colorScheme !== void 0 ? colorScheme : systemColorScheme];
  const useAnimation = !usePrefersReducedMotion();
  if (loading) {
    data = generateEmptyData();
  }
  if (data.length === 0) {
    return null;
  }
  const year = dateFns.getYear(dateFns.parseISO(data[0]?.date));
  const weeks = groupByWeeks(data, weekStart);
  const labels = Object.assign({}, DEFAULT_LABELS, labelsProp);
  const textHeight = hideMonthLabels ? 0 : fontSize + 2 * blockMargin;
  function getDimensions() {
    return {
      width: weeks.length * (blockSize + blockMargin) - blockMargin,
      height: textHeight + (blockSize + blockMargin) * 7 - blockMargin
    };
  }
  function getEventHandlers(activity) {
    return Object.keys(eventHandlers).reduce((handlers, key) => ({
      ...handlers,
      [key]: event => eventHandlers[key]?.(event)(activity)
    }), {});
  }
  function renderCalendar() {
    return weeks.map((week, weekIndex) => week.map((activity, dayIndex) => {
      if (!activity) {
        return null;
      }
      const style = loading && useAnimation ? {
        animation: `${styles.loadingAnimation} 1.75s ease-in-out infinite`,
        animationDelay: `${weekIndex * 20 + dayIndex * 20}ms`
      } : undefined;
      const block = /*#__PURE__*/React__default.default.createElement("rect", _extends({}, getEventHandlers(activity), {
        x: 0,
        y: textHeight + (blockSize + blockMargin) * dayIndex,
        width: blockSize,
        height: blockSize,
        rx: blockRadius,
        ry: blockRadius,
        "data-date": activity.date,
        "data-level": activity.level,
        style: style
      }));
      return /*#__PURE__*/React__default.default.createElement(React.Fragment, {
        key: activity.date
      }, renderBlock ? renderBlock(block, activity) : block);
    })).map((week, x) => /*#__PURE__*/React__default.default.createElement("g", {
      key: x,
      transform: `translate(${(blockSize + blockMargin) * x}, 0)`
    }, week));
  }
  function renderFooter() {
    var _labels$legend$less, _labels$legend$more;
    if (hideTotalCount && hideColorLegend) {
      return null;
    }
    const totalCount = typeof totalCountProp === 'number' ? totalCountProp : data.reduce((sum, activity) => sum + activity.count, 0);
    return /*#__PURE__*/React__default.default.createElement("footer", {
      className: getClassName('footer', styles.footer),
      style: {
        marginTop: 2 * blockMargin,
        fontSize
      }
    }, loading && /*#__PURE__*/React__default.default.createElement("div", null, "\xA0"), !loading && !hideTotalCount && /*#__PURE__*/React__default.default.createElement("div", {
      className: getClassName('count')
    }, labels.totalCount ? labels.totalCount.replace('{{count}}', String(totalCount)).replace('{{year}}', String(year)) : `${totalCount} activities in ${year}`), !loading && !hideColorLegend && /*#__PURE__*/React__default.default.createElement("div", {
      className: getClassName('legend-colors', styles.legendColors)
    }, /*#__PURE__*/React__default.default.createElement("span", {
      style: {
        marginRight: '0.4em'
      }
    }, (_labels$legend$less = labels?.legend?.less) !== null && _labels$legend$less !== void 0 ? _labels$legend$less : 'Less'), Array(LEVEL_COUNT).fill(undefined).map((_, level) => /*#__PURE__*/React__default.default.createElement("svg", {
      width: blockSize,
      height: blockSize,
      key: level
    }, /*#__PURE__*/React__default.default.createElement("rect", {
      width: blockSize,
      height: blockSize,
      fill: colorScale[level],
      rx: blockRadius,
      ry: blockRadius
    }))), /*#__PURE__*/React__default.default.createElement("span", {
      style: {
        marginLeft: '0.4em'
      }
    }, (_labels$legend$more = labels?.legend?.more) !== null && _labels$legend$more !== void 0 ? _labels$legend$more : 'More')));
  }
  function renderLabels() {
    const style = {
      fontSize
    };
    if (!showWeekdayLabels && hideMonthLabels) {
      return null;
    }
    return /*#__PURE__*/React__default.default.createElement(React__default.default.Fragment, null, showWeekdayLabels && /*#__PURE__*/React__default.default.createElement("g", {
      className: getClassName('legend-weekday'),
      style: style
    }, weeks[0].map((day, index) => {
      if (index % 2 === 0) {
        return null;
      }
      const dayIndex = (index + weekStart) % 7;
      return /*#__PURE__*/React__default.default.createElement("text", {
        x: -2 * blockMargin,
        y: textHeight + (fontSize / 2 + blockMargin) + (blockSize + blockMargin) * index,
        textAnchor: "end",
        key: index
      }, labels.weekdays ? labels.weekdays[dayIndex] : DEFAULT_WEEKDAY_LABELS[dayIndex]);
    })), !hideMonthLabels && /*#__PURE__*/React__default.default.createElement("g", {
      className: getClassName('legend-month'),
      style: style
    }, getMonthLabels(weeks, labels.months).map((_ref2, index, labels) => {
      let {
        text,
        x
      } = _ref2;
      // Skip the first month label if there's not enough space to the next one
      if (index === 0 && labels[1] && labels[1].x - x <= MIN_DISTANCE_MONTH_LABELS) {
        return null;
      }
      return /*#__PURE__*/React__default.default.createElement("text", {
        x: (blockSize + blockMargin) * x,
        dominantBaseline: "hanging",
        key: x
      }, text);
    })));
  }
  const {
    width,
    height
  } = getDimensions();
  const calendarStyles = {
    maxWidth: width,
    [`--${NAMESPACE}-level-0`]: colorScale[0],
    [`--${NAMESPACE}-level-1`]: colorScale[1],
    [`--${NAMESPACE}-level-2`]: colorScale[2],
    [`--${NAMESPACE}-level-3`]: colorScale[3],
    [`--${NAMESPACE}-level-4`]: colorScale[4],
    ...(useAnimation && {
      [`--${NAMESPACE}-loading`]: colorScale[0],
      [`--${NAMESPACE}-loading-active`]: colorScheme === 'light' ? chroma__default.default(colorScale[0]).darken(0.3).hex() : chroma__default.default(colorScale[0]).brighten(0.25).hex()
    })
  };
  return /*#__PURE__*/React__default.default.createElement("article", {
    className: `${NAMESPACE} ${styles.container}`,
    style: {
      ...style,
      ...calendarStyles
    }
  }, /*#__PURE__*/React__default.default.createElement("svg", {
    width: width,
    height: height,
    viewBox: `0 0 ${width} ${height}`,
    className: getClassName('calendar', styles.calendar)
  }, !loading && renderLabels(), renderCalendar()), renderFooter());
};
const Skeleton = props => /*#__PURE__*/React__default.default.createElement(ActivityCalendar, _extends({
  data: []
}, props));

exports.Skeleton = Skeleton;
exports.default = ActivityCalendar;
//# sourceMappingURL=index.js.map
