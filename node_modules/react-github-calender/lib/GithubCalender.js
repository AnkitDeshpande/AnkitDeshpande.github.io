var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

import React, { Component } from 'react';
import PropTypes from 'prop-types';
import './GithubCalender.css';

var GithubCalender = function (_Component) {
    _inherits(GithubCalender, _Component);

    function GithubCalender() {
        _classCallCheck(this, GithubCalender);

        return _possibleConstructorReturn(this, (GithubCalender.__proto__ || Object.getPrototypeOf(GithubCalender)).apply(this, arguments));
    }

    _createClass(GithubCalender, [{
        key: 'createGithubCalender',
        value: function createGithubCalender(body) {
            var div = document.createElement("div");
            div.innerHTML = body;
            var cal = div.querySelector(".js-contribution-graph");
            var hyperlink = "<a href='http://github.com/'+this.props.username>" + this.props.username + "</a>";
            var text = this.props.text || "Contributed by ";
            cal.querySelector(".float-left.text-gray").innerHTML = text + " " + hyperlink;
            document.getElementById('react-github-id').innerHTML = cal.innerHTML;
        }
    }, {
        key: 'componentDidMount',
        value: function componentDidMount() {
            var _this2 = this;

            //proxy for cors
            var fetchCalendar = function fetchCalendar() {
                return fetch("https://urlreq.appspot.com/req?method=GET&url=https://github.com/" + _this2.props.username).then(function (response) {
                    // console.log("success");
                    return response.text();
                }).then(function (body) {
                    _this2.createGithubCalender(body);
                }).catch(function (e) {
                    return console.error(e);
                });
            };
            fetchCalendar();
        }
    }, {
        key: 'render',
        value: function render() {
            return React.createElement('div', { className: 'github-calendar', id: 'react-github-id' });
        }
    }]);

    return GithubCalender;
}(Component);

GithubCalender.propTypes = {
    /** Github user name */
    username: PropTypes.string.isRequired,
    /** custom text to display */
    text: PropTypes.string
};

GithubCalender.defaultProps = {
    text: "All commits done by"
};

export default GithubCalender;